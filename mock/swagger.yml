openapi: 3.0.1
info:
  title: Swagger Mock API
  description: 'Mock API for vava.'
  contact:
    email: apiteamxman724939995@email.com
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: /mock-api
tags:
  - name: users
    description: Users related api.
  - name: articles
    description: Articles data related api.
  - name: notifications
    description: Notifications data related api.
  - name: pageviews
    description: Statistics data related api.
  - name: painted-face
    description: Painted face data related api.
paths:
  /users:
    get:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: getUsers
      responses:
        default:
          description: register successfully
          content: {}
      x-codegen-request-body-name: body
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Use username and password to login.
      operationId: login
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            X-Rate-Limit:
              schema:
                type: integer
                format: int32
              description: calls per hour allowed by the user.
            X-Expires-After:
              schema:
                type: string
                format: date-time
              description: date in UTC when token expires.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: admin-token
        400:
          $ref: '#/components/responses/InvalidUser'
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /users/{username}:
    get:
      tags:
        - users
      summary: Get user by user name
      description: Get user by user name.
      operationId: getUserByName
      security:
        - AuthAccessToken: []
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be fetched.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - AuthAccessToken: []
      parameters:
        - name: username
          in: path
          required: true
          description: Name that need to be updated.
          schema:
            type: string
        - name: user
          in: query
          required: true
          description: The data for updated user.
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - AuthAccessToken: []
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be deleted.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /users/info:
    post:
      tags:
        - users
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getMeInfo
      security:
        - AuthAccessToken: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /articles:
    get:
      tags:
        - articles
      summary: Get Article List
      description: Return a list of articles.
      operationId: getArticles
      parameters:
        - name: title
          in: query
          description: Used to filter articles by matched title substring.
          schema:
            $ref: '#/components/schemas/Article/properties/title'
        - name: status
          in: query
          description: Used to filter articles by status.
          schema:
            $ref: '#/components/schemas/Article/properties/status'
        - name: author
          in: query
          description: Used to filter articles by matched username substring.
          schema:
            type: string
        - name: page
          in: query
          description: The wanted page number (one page).
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: The maximum number of articles returned for one page.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
      responses:
        default:
          description: query articles successfully
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
        - articles
      summary: Create New Article
      description: Create a new article.
      operationId: createArticle
      security:
        - AuthAccessToken: []
      parameters:
        - name: article
          in: query
          required: true
          description: The data for new article.
          schema:
            $ref: '#/components/schemas/Article'
      responses:
        200:
          description: OK
          content:
            application/json: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /articles/{id}:
    get:
      tags:
        - articles
      summary: Get Article Detail
      description: Get article detail by ID.
      operationId: getArticle
      security:
        - AuthAccessToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: Article id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: object
                    properties:
                      article:
                        $ref: '#/components/schemas/Article'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - articles
      summary: Update Article Detail
      description: Update article deatail by ID.
      operationId: updateArticle
      security:
        - AuthAccessToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: Article id.
          schema:
            type: integer
            format: int64
        - name: title
          in: body
          required: true
          description: data for the updated article.
          schema:
            type: string
      responses:
        default:
          description: register successfully
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        x-codegen-request-body-name: body
    delete:
      tags:
        - articles
      summary: Delete Article
      description: Delete article by ID.
      operationId: deleteArticle
      security:
        - AuthAccessToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: Article id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /articles/histories/{id}:
    get:
      tags:
        - articles
      summary: Get an Article histories
      description: Get Article histories by ID
      operationId: getArticleHistories
      security:
        - AuthAccessToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: Article id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /notifications:
    get:
      tags:
        - notifications
      summary: Get Notifications List
      description: Return a list of notification.
      operationId: getNotifications
      parameters:
        - name: page
          in: query
          required: true
          description: The wanted page number (one page).
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          description: The maximum number of articles returned for one page.
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  page:
                    type: object
                    items:
                      $ref: '#/components/schemas/Pages'
    put:
      tags:
        - notifications
      summary: Read all notifications
      description: Mark all notifications as readed
      operationId: notificationReadAll
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: success
  /notifications/{id}:
    get:
      tags:
        - notifications
      summary: Get notification detail
      description: Get notification details by ID
      operationId: getNotification
      parameters:
        - name: id
          in: path
          required: true
          description: Article id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int16
                  data:
                    $ref: '#/components/schemas/Notification'
  /notifications/count:
    get:
      tags:
        - notifications
      summary: Get notifications unread total
      description: Return a number of unread total
      operationId: getNotificationsUnreadCount
      responses:
        default:
          description: register successfully
          content: {}
      x-codegen-request-body-name: body
  /pageviews:
    get:
      tags:
        - pageviews
      summary: Get Pageviews Data
      description: Return a list of pageviews for each platforms.
      operationId: getPageViews
      parameters:
        - name: start
          in: query
          description: The wanted time start
          schema:
            $ref: '#/components/schemas/Timestamp'
        - name: end
          in: query
          description: The wanted time end
          schema:
            $ref: '#/components/schemas/Timestamp'
      responses:
        default:
          description: register successfully
          content: {}
      x-codegen-request-body-name: body
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        success:
          type: boolean
        message:
          type: string
    Errors:
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message
      xml:
        name: Errors
    Pages:
      type: object
      properties:
        page:
          type: integer
          format: int16
        limit:
          type: integer
          format: int16
        total:
          type: integer
          format: int16
      xml:
        name: Category
    Role:
      type: string
      enum:
        - systemAdmin
        - superAdmin
        - accessManager
        - userManager
        - proManager
        - auditor
        - editor
        - visitor
    Sex:
      type: string
      enum:
        - female
        - male
        - unknown
    Timestamp:
      type: integer
      format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        nickname:
          type: string
        email:
          type: string
        phone:
          type: string
        qq:
          type: string
        company:
          type: string
        avatar:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
        age:
          type: integer
          format: int16
        birthday:
          $ref: '#/components/schemas/Timestamp'
        height:
          type: integer
          format: int16
        weight:
          type: integer
          format: int16
        intro:
          type: string
      required:
        - id
        - username
        - password
        - roles
      xml:
        name: User
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        author:
          $ref: '#/components/schemas/User'
        auditor:
          $ref: '#/components/schemas/User'
        title:
          type: string
        summery:
          type: string
        content:
          type: string
        status:
          type: string
          enum:
            - draft
            - committed
            - failing
            - auditing
            - audited
            - deleted
        source:
          type: string
          enum:
            - platform-a
            - platform-b
            - platform-c
        pageviews:
          type: integer
          format: int32
      required:
        - id
        - timestamp
        - author
        - auditor
        - title
        - content
        - status
        - pageviews
      xml:
        name: Article
    Notification:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        from:
          type: string
          enum:
            - system
            - user-a
            - user-b
            - user-c
        title:
          type: string
        isUnread:
          type: boolean
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      xml:
        name: Notification
    PageViews:
      type: object
      properties:
        date:
          $ref: '#/components/schemas/Timestamp'
        pv:
          type: integer
          format: int32
        uv:
          type: integer
          format: int32
        cvr:
          type: integer
          format: int32
      required:
        - date
        - pv
        - uv
        - cvr
      xml:
        name: PageViews
  securitySchemes:
    AuthAccessToken:
      type: apiKey
      name: X-Access-Token
      in: header
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    InvalidUser:
      description: Invalid username supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
